"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Copy, Check, Share2, FileText } from "lucide-react"
import { jsPDF } from "jspdf"
import { useMediaQuery } from "@/hooks/use-media-query"

interface DirectShareOptionsProps {
  assessmentData: any
  userName?: string
  assessmentDate?: Date
}

export default function DirectShareOptions({
  assessmentData,
  userName,
  assessmentDate = new Date(),
}: DirectShareOptionsProps) {
  const [copied, setCopied] = useState(false)
  const [isGeneratingPdf, setIsGeneratingPdf] = useState(false)
  const isMobile = useMediaQuery("(max-width: 640px)")

  // Format date and time for display
  const formattedDate = assessmentDate.toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
  })

  const formattedTime = assessmentDate.toLocaleTimeString("en-US", {
    hour: "2-digit",
    minute: "2-digit",
  })

  // Create a simple text representation of the assessment
  const getTextSummary = () => {
    const riskLevel = assessmentData.result.risk
    const riskScore = assessmentData.result.score

    // Format food habits
    const foodHabits =
      assessmentData.foodHabits === "vegetarian"
        ? "Vegetarian"
        : assessmentData.foodHabits === "non-vegetarian"
          ? "Non-Vegetarian"
          : "Mixed Diet"

    // Format junk food consumption
    const junkFood =
      assessmentData.junkFoodConsumption === "low"
        ? "Low (rarely)"
        : assessmentData.junkFoodConsumption === "moderate"
          ? "Moderate (weekly)"
          : "High (daily)"

    // Get readable values for categorical fields
    const getReadableValue = (field, value) => {
      const mappings = {
        sex: { "0": "Female", "1": "Male" },
        cp: { "0": "Typical angina", "1": "Atypical angina", "2": "Non-anginal pain", "3": "Asymptomatic" },
        fbs: { "0": "â‰¤ 120 mg/dl", "1": "> 120 mg/dl" },
        restecg: { "0": "Normal", "1": "ST-T wave abnormality", "2": "Left ventricular hypertrophy" },
        exang: { "0": "No", "1": "Yes" },
        slope: { "0": "Upsloping", "1": "Flat", "2": "Downsloping" },
        thal: { "0": "Normal", "1": "Fixed defect", "2": "Reversible defect" },
      }

      if (field in mappings && value in mappings[field]) {
        return mappings[field][value]
      }
      return value
    }

    return `
HEART ASSESSMENT RESULTS

Patient: ${userName || "Anonymous User"}
Date: ${formattedDate}
Time: ${formattedTime}

Risk Level: ${riskLevel.toUpperCase()}
Risk Score: ${riskScore}%

BASIC HEALTH METRICS:
- Age: ${assessmentData.age} years
- Gender: ${getReadableValue("sex", assessmentData.sex)}
- Blood Pressure: ${assessmentData.trestbps} mm Hg
- Cholesterol: ${assessmentData.chol} mg/dl

CARDIAC ASSESSMENT:
- Chest Pain Type: ${getReadableValue("cp", assessmentData.cp)}
- Fasting Blood Sugar: ${getReadableValue("fbs", assessmentData.fbs)}
- Resting ECG: ${getReadableValue("restecg", assessmentData.restecg)}
- Max Heart Rate: ${assessmentData.thalach || "N/A"}
- Exercise Induced Angina: ${getReadableValue("exang", assessmentData.exang)}
- ST Depression: ${assessmentData.oldpeak || "N/A"}
- ST Slope: ${getReadableValue("slope", assessmentData.slope) || "N/A"}
- Number of Major Vessels: ${assessmentData.ca || "N/A"}
- Thalassemia: ${getReadableValue("thal", assessmentData.thal) || "N/A"}

LIFESTYLE FACTORS:
- Food Habits: ${foodHabits}
- Junk Food Consumption: ${junkFood}
- Sleeping Hours: ${assessmentData.sleepingHours || "N/A"} hours/day

Assessment generated by HeartPredict on ${formattedDate} at ${formattedTime}
`.trim()
  }

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(getTextSummary())
      setCopied(true)
      setTimeout(() => setCopied(false), 2000)
    } catch (error) {
      console.error("Failed to copy to clipboard:", error)
    }
  }

  // Generate PDF from assessment data
  const generatePDF = async () => {
    // Create PDF
    const pdf = new jsPDF({
      orientation: "portrait",
      unit: "mm",
    })

    // Set font
    pdf.setFont("helvetica")

    // Add title
    pdf.setFontSize(20)
    pdf.setTextColor(0, 0, 0)
    pdf.text("Health Assessment Results", 20, 20)

    // Add patient name if available
    pdf.setFontSize(12)
    pdf.setTextColor(0, 0, 0)
    pdf.text(`Patient: ${userName || "Anonymous User"}`, 20, 30)

    // Add date and time
    pdf.setFontSize(10)
    pdf.setTextColor(100, 100, 100)
    pdf.text(`Generated on ${formattedDate} at ${formattedTime}`, 20, 35)

    // Add risk level
    pdf.setFontSize(16)
    pdf.setTextColor(0, 0, 0)
    const riskLevel = assessmentData.result.risk.charAt(0).toUpperCase() + assessmentData.result.risk.slice(1)
    pdf.text(`Risk Level: ${riskLevel}`, 20, 45)

    // Add risk score
    pdf.setFontSize(14)
    pdf.text(`Risk Score: ${assessmentData.result.score}%`, 20, 55)

    // Add health metrics section
    pdf.setFontSize(16)
    pdf.text("Health Metrics", 20, 70)

    // Draw a line
    pdf.setDrawColor(200, 200, 200)
    pdf.line(20, 72, 190, 72)

    // Add metrics
    pdf.setFontSize(12)
    let y = 80

    // Helper function to add a metric
    const addMetric = (label: string, value: string) => {
      pdf.setTextColor(80, 80, 80)
      pdf.text(label, 20, y)
      pdf.setTextColor(0, 0, 0)
      pdf.text(value, 80, y)
      y += 10
    }

    // Add basic metrics
    addMetric("Age:", `${assessmentData.age} years`)
    addMetric("Gender:", assessmentData.sex === "1" ? "Male" : "Female")
    addMetric("Blood Pressure:", `${assessmentData.trestbps} mm Hg`)
    addMetric("Cholesterol:", `${assessmentData.chol} mg/dl`)
    addMetric(
      "Chest Pain Type:",
      (() => {
        const types = ["Typical angina", "Atypical angina", "Non-anginal pain", "Asymptomatic"]
        return types[Number.parseInt(assessmentData.cp)] || assessmentData.cp
      })(),
    )
    addMetric("Fasting Blood Sugar:", assessmentData.fbs === "1" ? "Above 120 mg/dl" : "Below 120 mg/dl")

    if (assessmentData.thalach) {
      addMetric("Max Heart Rate:", assessmentData.thalach)
    }

    addMetric("Exercise Induced Angina:", assessmentData.exang === "1" ? "Yes" : "No")

    // Add disclaimer
    y += 10
    pdf.setFontSize(10)
    pdf.setTextColor(100, 100, 100)
    pdf.text("This assessment is not a medical diagnosis. Please consult with a healthcare provider.", 20, y)

    // Add footer
    pdf.setFontSize(8)
    pdf.setTextColor(150, 150, 150)
    pdf.text(`Generated by HeartPredict on ${formattedDate} at ${formattedTime}`, 20, pdf.internal.pageSize.height - 10)

    return pdf
  }

  const sharePdfDirectly = async () => {
    try {
      setIsGeneratingPdf(true)

      // Generate PDF
      const pdf = await generatePDF()

      // Create filename based on risk level and date
      const riskLevel = assessmentData.result.risk
      const date = assessmentDate.toISOString().split("T")[0]
      const filename = `health-assessment-${riskLevel}-risk-${date}.pdf`

      // Convert PDF to blob
      const pdfBlob = new Blob([pdf.output("arraybuffer")], { type: "application/pdf" })

      // Check if it's a mobile device
      const isMobileDevice = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)

      // Try to use the native share API
      if (navigator.share && (isMobileDevice || navigator.canShare)) {
        try {
          // Create file from blob for sharing
          const pdfFile = new File([pdfBlob], filename, { type: "application/pdf" })

          // Check if we can share files
          const shareData = {
            title: "Health Assessment Results",
            text: "My heart health assessment results",
            files: [pdfFile],
          }

          if (navigator.canShare && navigator.canShare(shareData)) {
            await navigator.share(shareData)
          } else {
            // Fallback to sharing just text with a download link
            await navigator.share({
              title: "Health Assessment Results",
              text: "My heart health assessment results. Please download the PDF for details.",
            })

            // Also download the PDF since we couldn't share it directly
            const pdfUrl = URL.createObjectURL(pdfBlob)
            const link = document.createElement("a")
            link.href = pdfUrl
            link.download = filename
            link.click()
            URL.revokeObjectURL(pdfUrl)
          }
        } catch (shareError) {
          console.error("Error with native sharing:", shareError)
          // Fallback to desktop sharing options
          openDesktopShareOptions(pdfBlob, filename)
        }
      } else {
        // Use desktop sharing options
        openDesktopShareOptions(pdfBlob, filename)
      }

      setIsGeneratingPdf(false)
    } catch (error) {
      console.error("Error sharing PDF:", error)
      setIsGeneratingPdf(false)
    }
  }

  // Function to handle desktop sharing options
  const openDesktopShareOptions = (pdfBlob: Blob, filename: string) => {
    // Create object URL for the PDF
    const pdfUrl = URL.createObjectURL(pdfBlob)

    // Create a modal or popup with sharing options
    const shareOptions = document.createElement("div")
    shareOptions.className = "fixed inset-0 bg-black/50 flex items-center justify-center z-50"
    shareOptions.innerHTML = `
      <div class="bg-gray-900 p-6 rounded-lg max-w-md w-full border border-gray-800">
        <h3 class="text-xl font-semibold mb-4">Share Options</h3>
        <p class="text-gray-400 mb-4">Choose how you'd like to share your assessment:</p>
        <div class="flex flex-col gap-3">
          <a href="mailto:?subject=Health Assessment Results&body=Please find my health assessment results attached." class="flex items-center gap-2 bg-gray-800 hover:bg-gray-700 p-3 rounded-md">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" class="h-5 w-5"><rect width="20" height="16" x="2" y="4" rx="2"/><path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"/></svg>
            Email PDF
          </a>
          <a href="${pdfUrl}" download="${filename}" class="flex items-center gap-2 bg-gray-800 hover:bg-gray-700 p-3 rounded-md">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" class="h-5 w-5"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/><polyline points="7 10 12 15 17 10"/><line x1="12" x2="12" y1="15" y2="3"/></svg>
            Download PDF
          </a>
          <button id="close-share-options" class="mt-2 p-2 bg-gray-800 hover:bg-gray-700 rounded-md">Close</button>
        </div>
      </div>
    `

    document.body.appendChild(shareOptions)

    // Add event listener to close button
    document.getElementById("close-share-options")?.addEventListener("click", () => {
      document.body.removeChild(shareOptions)
      URL.revokeObjectURL(pdfUrl)
    })
  }

  const shareDirectly = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: "Health Assessment Results",
          text: getTextSummary(),
        })
      } catch (error) {
        console.error("Error sharing:", error)
      }
    } else {
      // Fallback to copy if Web Share API is not available
      copyToClipboard()
    }
  }

  return (
    <Card className="bg-gray-900 border-gray-800">
      <CardHeader className={isMobile ? "px-4 py-3" : ""}>
        <CardTitle className={isMobile ? "text-lg" : ""}>Quick Share Options</CardTitle>
        <CardDescription>Alternative ways to share your assessment results</CardDescription>
      </CardHeader>
      <CardContent className={`${isMobile ? "px-4 py-3" : ""} space-y-4`}>
        <div className="space-y-2">
          <p className="text-sm text-gray-400">If email delivery is failing, try these alternative methods:</p>

          <div className={`flex flex-wrap ${isMobile ? "gap-2" : "gap-3"}`}>
            <Button
              variant="outline"
              className="flex items-center gap-2"
              onClick={copyToClipboard}
              size={isMobile ? "sm" : "default"}
            >
              {copied ? <Check className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
              {copied ? "Copied!" : "Copy to Clipboard"}
            </Button>

            <Button
              variant="outline"
              className="flex items-center gap-2"
              onClick={shareDirectly}
              size={isMobile ? "sm" : "default"}
            >
              <Share2 className="h-4 w-4" />
              Share Directly
            </Button>

            <Button
              variant="outline"
              className="flex items-center gap-2"
              onClick={sharePdfDirectly}
              disabled={isGeneratingPdf}
              size={isMobile ? "sm" : "default"}
            >
              <FileText className="h-4 w-4" />
              {isGeneratingPdf ? "Generating..." : "Share PDF"}
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}
